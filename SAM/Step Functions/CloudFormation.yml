# Create a stack with the name [sam-stack]
# The stack name needs to be in lowercase
---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  MainBranchName:
    Type: String
    Default: 'master'

Resources:
  CodeCommit:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: "stepfunctions-repo"

  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: "stepfunctions-codebuild"
      ServiceRole: !Ref CodeBuildIAMRole
      Source:
        Type: "CODECOMMIT"
        Location: !GetAtt CodeCommit.CloneUrlHttp
      SourceVersion:
        !Sub "refs/heads/${MainBranchName}"
      Artifacts:
        Type: "NO_ARTIFACTS"
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:5.0"
        PrivilegedMode: True
      LogsConfig:
        CloudWatchLogs:
            GroupName: !Ref CodeBuildClousWatchLogs
            Status: "ENABLED"

  CodeBuildClousWatchLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-CodeBuildClousWatchLogs"
      RetentionInDays: 1

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: "stepfunctions-codepipeline"
      ArtifactStore:
        Type: "S3"
        Location: !Ref CodePipelineS3
      RoleArn: !GetAtt CodePipelineIAMRole.Arn
      Stages:
        - Name: "Source"
          Actions:
            - Name: "Source"
              ActionTypeId:
                Category: "Source"
                Owner: "AWS"
                Provider: "CodeCommit"
                Version: "1"
              Configuration:
                PollForSourceChanges: false
                BranchName: !Ref MainBranchName
                RepositoryName:
                  !GetAtt CodeCommit.Name
              OutputArtifacts:
                - Name: "SourceArtifacts"
        - Name: "Build"
          Actions:
            - Name: "Build"
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuild
              InputArtifacts:
                - Name: "SourceArtifacts"

  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "EventBridgeRule-stepfunctions-codepipeline"
      EventBusName: "default"
      State: "ENABLED"
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !GetAtt CodeCommit.Arn
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref MainBranchName
      Targets:
        - Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:stepfunctions-codepipeline"
          Id: CodePipeline
          RoleArn: !GetAtt EventBridgeIAMRole.Arn

  CodePipelineS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-${AWS::StackName}-codepipeline"
      VersioningConfiguration:
        Status: "Enabled"
      IntelligentTieringConfigurations:
        - Id: "IntelligentTieringConfigurations"
          Status: "Enabled"
          Tierings:
            - Days: 90
              AccessTier: "ARCHIVE_ACCESS"
            - Days: 180
              AccessTier: "DEEP_ARCHIVE_ACCESS"

  SAMS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-${AWS::StackName}-sam"
      VersioningConfiguration:
        Status: "Enabled"
      IntelligentTieringConfigurations:
        - Id: "IntelligentTieringConfigurations"
          Status: "Enabled"
          Tierings:
            - Days: 90
              AccessTier: "ARCHIVE_ACCESS"
            - Days: 180
              AccessTier: "DEEP_ARCHIVE_ACCESS"

# To empty the bucket contents and delete S3 when deleting the stack
# Executed only when the stack is deleted by an if statement
  LambdaDeleteS3Object:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DeleteS3
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: python3.10
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def lambda_handler(event, context):
              s3 = boto3.resource('s3')
              try:
                  if event['RequestType'] == 'Delete':
                      bucket = s3.Bucket(event['ResourceProperties']['BucketName'])
                      bucket.objects.all().delete()
                      bucket.object_versions.all().delete()
                      s3.Bucket(event['ResourceProperties']['BucketName']).delete()
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print("Error: ", e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  InvokeLambdaDeleteS3Object1:
    Type: Custom::EmptyS3Bucket
    DependsOn: CodePipelineS3
    Properties:
      ServiceToken: !GetAtt LambdaDeleteS3Object.Arn
      BucketName: !Ref CodePipelineS3

  InvokeLambdaDeleteS3Object2:
    Type: Custom::EmptyS3Bucket
    DependsOn: SAMS3
    Properties:
      ServiceToken: !GetAtt LambdaDeleteS3Object.Arn
      BucketName: !Ref SAMS3

  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDeleteS3ObjectPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - logs:*
                Resource: "*"

  CodeBuildIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "CodeBuildIAMRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - codebuild.amazonaws.com
      Policies:
        - PolicyName: "CodeBuildIAMPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codecommit:*"
                  - "codebuild:*"
                  - "logs:*"
                  - "s3:*"
                  - "ec2:*"
                  - "states:*"
                  - "cloudformation:*"
                  - "iam:*"
                Resource: "*"

  CodePipelineIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "CodePipelineIAMRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - codepipeline.amazonaws.com
      Policies:
        - PolicyName: "CodePipelineIAMPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codecommit:*"
                  - "codebuild:*"
                  - "s3:*"
                  - "cloudwatch:*"
                  - "sns:*"
                  - "iam:PassRole"
                Resource: "*"

  EventBridgeIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "EventBridgeIAMRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - events.amazonaws.com
      Policies:
        - PolicyName: "EventBridgeIAMPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codepipeline:StartPipelineExecution"
                Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:stepfunctions-codepipeline"